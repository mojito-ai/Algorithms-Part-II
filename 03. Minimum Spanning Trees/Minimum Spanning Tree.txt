Introduction to MSTs: 

	1. Given: An undirected graph G with positive edge weights (connected)
	2. Define: A spanning Tree of G is a subgraph T that is both a tree (connected and acyclic) and spanning (includes all of the edges)
	3. Goal: Find a minimum weight spanning tree

Applications:

	a. MST of bicycle routes in North Seattle (Network Design)
	b. MST of random graph (Models of nature)
	c. MST describes arrangement of nuclei in the epithelium for cancer research (Medical Image Processing)
	d. MST dithering (Remove Fuzziness in medical analysis)
	e. Cluster Analysis
	f. Max Bottleneck paths
	g. Real time face verification
	h. Image registration with Renyl entropy
	i. LDPC codes for error corrections
	j. Find road networks in satellite and ariel imagery
	k. Autoconfig protocol for Ethernet bridging to avoid cycles in a network.
	l. Approximation Alogrithms for NP-hard problems (TSP, Steiner Tree)
	m. Network Design (Communication, electrical, computer, road, hydraulic)
	
Greedy Algorithm: (General Principle & Algorithm Design)
	
	i. Simplifying Assumptions (Edge weights are distinct & graph is connected) -> MST exists and is unique
	
	ii. Cut Property:
				- A cut in a graph is a partition of the vertices into two non empty sets.
				- A crossing edge connects a vertex from one set with a vertex in the other.
				- Given any cut, the crossing edge with minimum weight lies in the MST.
				
	iii. Correctness Proof:
				- Suppose minimum weight cross edge e does not lie in the MST
				- Adding e would create a cycle
				- Some other edge f in cycle must be a crossing edge.
				- Removing f & adding e is also a spanning tree.
				- Since weight of e is less that the weight of f, the spanning tree is of lower weight.
				- Contradiction to the original Spanning Tree.
				
	iv. Algorithm:
				- Start with all edges colored gray.
				- Find cut with no black crossing edge; color its minimum weight crossing edge black.
				- Repeat until V-1 edges are colored black.
	
	v. A spanning tree of Graph G (V vertices, E edges) has V vertices and V-1 edges.
	
Implementations:

	> Kruskal's Algorithm
	> Prim's Algorithm
	> Boruvka's Algorithm
	
Removing the Simplifying assumptions:

	~ What if edge weights are not all distinct? (Multiple MSTs exist)
	~ What if the graph is not connected? (Minimum spanning forest - MST of each component)