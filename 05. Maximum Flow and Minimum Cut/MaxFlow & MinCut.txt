Introduction to MaxFlow & MinCut:

MinCut Problem:
	
	Input: An edge weighted digraph, source vertex s, and target vertex t. (each edge has a positive capacity)
	
	Def: A st-cut(cut) is a partition of the vertices into two disjoint sets, with s in one Set A and t in the other set B.
	Def: Its capacity is defined as the sum of the capacities of edges going from set A to B.
	
	Minimum st-cut (min-cut) problem : Find a cut of minimum capacity
	
	Applications: 
		 
		-1950s: Cut supplies (if Cold War turns into real war)
		Rail network connecting Soviet Union with Eastern European countries (map declassified by Pentagon in 1999)
		
		-2010: Government-in-power's goal. Cut off communication to a set of people.
		
MaxFlow Problem:

	Input: An edge weighted digraph, source vertex x, and target vertex t. (each edge has a positive capacity)
	
	Def: An st-flow (flow) is an assignment of values to the edges such that
		
		1. Capacity Constraint: 0 <= edge's flow <= edge's capacity 
		2. Local Equilibrium: Inflow=Outflow at every vertex (except for s & t)
		
	Def: The value of a flow is the Inflow at t. (we assume no edge points from t or to s)
	
	Maximum st-flow (max-flow) problem : Find a flow of maximum value.
	
	Applications: 
	
		-Soviet Union Goal: Maximize flow of supplies to Eastern Europe
		-"Free World" goal: Maximize flow of information to specified set of people.
		
Summary: MaxFlow and MinCut are Primal & Dual relationship

Applications:

	Maxflow/Mincut is a widely applicable problem solving model
	
	1. Datamining
	2. Openpit mining
	3. Bipartite matching
	4. Network reliability
	5. Baseball elimination
	6. Image segmentation (Liver and hepatic vascularization segmentation)
	7. Network connectivity
	8. Distributed computing
	9. Egalitarian stable matching
	10. Security of statistical data
	11. Multi camera scene restoration
	12. Sensor placement for homeland security
	13. Many, many more
	
Bipartite Matching:
	- N students apply for N jobs
	- Each gets several offers
	- Is there a way to match all the students to jobs?
	
	Given a bipartite graph, find a perfect matching
	
	Network flow formulation of bipartite matching
	- Create s,t, one vertex for each student, and one vertex for each job
	- Add edge from s to each student (capacity 1)
	- Add edge from each job to t (capacity 1)
	- Add edge from student to each job offered (infinite capacity)
	
	* 1-1 correspondance between perfect matchings in bipartite graph and integer-valued maxflows of value N
	
	* What the mincut tells us?
	- Mincut: consider mincut (A,B)
	- Let S=students on s side of the cut
	- Let T=companies on s side of the cut
	- Fact= |S|>|T|; students in S can be matched only to companies in T
	
	Bottom Line: When no perfect matching, mincut explains why
	
	Suppose that we run FF (using shortest path augmenting model), how many paths are needed in worst case (n student, n companies)
	> N paths (For more general networks, the shortest augmenting path heuristic requires 1/2 EV paths to find a maxflow in a network of V
	  vertices and E-edges. However in bipartite model, all edges are 1 and value of maxflow is at most n. Thus at most N 
	  augmenting paths are needed since each augmenting path delivers 1 unit of flow to t)
	> We also note that a more refined version of the shortest path augmenting model leads to E(V)^0.5 running time.
	
Baseball Elimination:
	- Which teams have a chance of finishing the season with the most wins?
	
	i		team		wins		losses			to play			ATL	PHI	NYM	MON
	0		Atlanta		83			71					8			0	1	6	1
	1		Philly		80			79					3			1	0	0	2
	2 		New York	78			78					6			6	0	0	0
	3		Montreal	77			82					3			1	2	0	0
	
	i. Montreal is mathematically eliminated
	> Montreal finishes <=80
	> Atlanta already has 83 wins
	
	ii. Philadelphia is mathematically eliminated
	> Philly finishes with <=83 wins
	> Either New York or Atlanta will finish with >=84 wins
	 
	
	
