Writing binary data

Date representation: Three different ways to represent 12/31/1999.

	1. A character stream (StdOut)
		StdOut.print(month + "/" + day + "/" + year);

		00110001 00110010 00101111 00110111 00110001 00101111 00110001 00111001 00111001 00111001		80 bits
			1		2		/			3		1		/		1			9		9		9
			
	2. Three ints (BinaryStdOut)
		BinaryStdOut.write(month);
		BinaryStdOut.write(day);
		BinaryStdOut.write(year);
	
		00000000000000000000000000001100 00000000000000000000000000011111 00000000000000000000011111001111		96 bits
					12								31									1999
					
	3. A 4-bit field, a 5-bit field and a 12 bit field (BinaryStdOut)
		BinaryStdOut.write(month,4);
		BinaryStdOut.write(day,5);
		BinaryStdOut.write(year,12);
		
		1100 11111 011111001111 000		21 bits (+3 for byte alignment at close)
		12		31		1999		
		
		
Universal Data compression: US Patent 5,533,051 on "Methods for Data Compression", which is capable of compression all files.

				Slashdot reports of the Zero Space Tuner™ and BinaryAccelerator™.
				“ ZeoSync has announced a breakthrough in data compression
				that allows for 100:1 lossless compression of random data. If
				this is true, our bandwidth problems just got a lot smaller.… ”
				
	1. Proposition. No algorithm can compress every bitstring.
				
				Pf 1. [by contradiction]
				- Suppose you have a universal data compression algorithm U that can compress every bitstream.
				- Given bitstring B0, compress it to get smaller bitstring B1.
				- Compress B1 to get a smaller bitstring B2.
				- Continue until reaching bitstring of size 0.
				- Implication: all bitstrings can be compressed to 0 bits!
				
				Pf 2. [by counting]
				- Suppose your algorithm that can compress all 1,000-bit strings.
				- 2^1000 possible bitstrings with 1,000 bits.
				- Only 1 + 2 + 4 + … + 2^998 + 2^999 can be encoded with ≤ 999 bits.
				- Similarly, only 1 in 2^499 bitstrings can be encoded with ≤ 500 bits!
				
Undecidability:

%java RandomBits - 1000000 bits. A difficult way to compress one million (pseudo) random bits

					public class RandomBits
					{
					 	public static void main(String[] args)
					 	{
					 		int x = 11111;
					 		for (int i = 0; i < 1000000; i++)
					 		{
								 x = x * 314159 + 218281;
								 BinaryStdOut.write(x > 0);
					 		}
					 		BinaryStdOut.close();
					 	}
					}
				
			- The program is the most compact way to compare the data
			- Compression amounts to finding the program that created it.				
				

Redundancy in English Language: Quite a bit

				“ ... randomising letters in the middle of words [has] little or no
				effect on the ability of skilled readers to understand the text. This
				is easy to denmtrasote. In a pubiltacion of New Scnieitst you
				could ramdinose all the letetrs, keipeng the first two and last two
				the same, and reibadailty would hadrly be aftcfeed. My ansaylis
				did not come to much beucase the thoery at the time was for
				shape and senqeuce retigcionon. Saberi's work sugsegts we may
				have some pofrweul palrlael prsooscers at work. The resaon for
				this is suerly that idnetiyfing coentnt by paarllel prseocsing
				speeds up regnicoiton. We only need the first and last two letetrs
				to spot chganes in meniang. ” — Graham Rawlinson
				
				