1. NP: NP is the class of all search problems. (Note: classic definition limits NP to yes-no problems)

		problem 		description 					poly-time algorithm 		instance I 			solution S
		
		LSOLVE			Find a vector x that			Gaussian elimination
		( A, b )		satisfies Ax = b
			
		LP				Find a vector x that			Ellipsoid
		( A, b )		satisfies Ax ≤ b ellipsoid
		

		ILP				Find a binary vector x			???
		( A, b )		that satisfies Ax ≤ b
		
	
		SAT				Find a boolean vector x			???
		( Φ, b )		that satisfies Φ(x) = b
		


		FACTOR			Find a nontrivial factor		??? 						147573952589676412927 193707721
		( x )			of the integer x
		

		Significance. What scientists and engineers aspire to compute feasibly.
		
2. P: P is the class of search problems solvable in poly-time.

		problem 		description 					poly-time algorithm 
		
		LSOLVE			Find a vector x that			Gaussian elimination
		( A, b )		satisfies Ax = b				(Edmonds 1967)
			
		LP				Find a vector x that			Ellipsoid
		( A, b )		satisfies Ax ≤ b ellipsoid		(Khachiyan 1979)
		

		SORT			Find a permutation that			mergesort
		( a )			puts array a in order			(von Neumann 1945)
		
		
		STCONN			Find a path in a				Depth-First search
		( G, s, t )		graph G from s to t				(Thesus)
		
		Significance. What scientists and engineers do compute feasibly.

3. Nondeterminism: Nondeterministic machine can guess the desired solution.

		Ex. int[] a = new int[N];
			・Java: initializes entries to 0.
			・Nondeterministic machine: initializes entries to the solution!
			
		Ex. Turing machine.
			・Deterministic: state, input determines next state.
			・Nondeterministic: more than one possible next state.
			
		NP. Search problems solvable in poly time on a nondeterministic TM.
		
4. Extended Church-Turing thesis

		P = search problems solvable in poly-time in the natural world.
		Evidence supporting thesis. True for all physical computers.
		
		Natural computers? No successful attempts (yet).
		Ex. Computing Steiner trees with soap bubbles
		STEINER: Find set of lines of minimal length connecting N given points
		
		Implication. To make future computers more efficient, suffices to focus on improving implementation of existing designs.
		
5. P vs. NP

		Q. Being creative vs. appreciating creativity?
			Ex. Mozart composes a piece of music; our neurons appreciate it.
			Ex. Wiles proves a deep theorem; a colleague referees it.
			Ex. Boeing designs an efficient airfoil; a simulator verifies it.
			Ex. Einstein proposes a theory; an experimentalist validates it.
			
		Computational analog. Does P = NP?
		
		P. Class of search problems solvable in poly-time.
		NP. Class of all search problems.

		Two worlds.
			If P = NP… Poly-time algorithms for SAT, ILP, TSP, FACTOR, …
			If P ≠ NP… Would learn something fundamental about our universe.
			
6. Classifying Problems

		A key problem: satisfiability
		SAT. Given a system of boolean equations, find a solution.
		
		x'1 or x2 or x3 = true
		x1 or x'2 or x3 = true
		x'1 or x'2 or x'3 = true
		x'1 or x'2 or x4 = true
		
		Key applications.
			・Automatic verification systems for software.
			・Electronic design automation (EDA) for hardware.
			・Mean field diluted spin glass model in physics.
			・...
	
		Exhaustive Search			
				Q. How to solve an instance of SAT with n variables?
				A. Exhaustive search: try all 2n truth assignments.
				
				Q. Can we do anything substantially more clever?
				Conjecture. No poly-time algorithm for SAT.

		Classifying problems
		
				Q. Which search problems are in P?
				A. No easy answers (we don't even know whether P = NP).
				
				Problem X poly-time reduces to problem Y if X can be solved with:
				・Polynomial number of standard computational steps.
				・Polynomial number of calls to Y.
				
				Consequence. If SAT poly-time reduces to Y, then we conclude that Y is (probably) intractable.
				
				
				SAT poly-time reduces to ILP
				
					SAT. Given a system of boolean equations, find a solution.
					x'1 or x2 or x3 = true
					x1 or x'2 or x3 = true
					x'1 or x'2 or x'3 = true		--> can to reduce any SAT problem to this form
					x'1 or x'2 or x4 = true
					
					ILP. Given a system of linear inequalities, find a 0-1 solution.
					 1 ≤ (1 − x1 ) + x2 + x3
					 1 ≤ x1 + (1 − x2 ) + x3				--> solution to this ILP instance gives solution to original SAT instance
					 1 ≤ (1 − x1 ) + (1 − x2 ) + (1 − x3 )
					 1 ≤ (1 − x1 ) + (1 − x2 ) + x4
					 
		More poly-time reductions from boolean satisfiability
		
						SAT
		3-COLOR 		IND-SET							VERTEX COVER
	EXACT COVER			ILP								CLIQUE 			HAM-CYCLE
	SUBSET-SUM														TSP		HAM-PATH
	PARTITION
KNAPSACK	BIN-PACKING

		Conjecture. SAT is intractable. (Dick Karp '85 Turing Award)
		Implication. All of these problems are intractable.


		Still more reductions from SAT
			Aerospace engineering. Optimal mesh partitioning for finite elements.
			Biology. Phylogeny reconstruction.
			Chemical engineering. Heat exchanger network synthesis.
			Chemistry. Protein folding.
			Civil engineering. Equilibrium of urban traffic flow.
			Economics. Computation of arbitrage in financial markets with friction.
			Electrical engineering. VLSI layout.
			Environmental engineering. Optimal placement of contaminant sensors.
			Financial engineering. Minimum risk portfolio of given return.
			Game theory. Nash equilibrium that maximizes social welfare.
			Mathematics. Given integer a1, …, an, compute
			Mechanical engineering. Structure of turbulence in sheared flows.
			Medicine. Reconstructing 3d shape from biplane angiocardiogram.
			Operations research. Traveling salesperson problem.
			Physics. Partition function of 3d Ising model.
			Politics. Shapley-Shubik voting power.
			Recreation. Versions of Sudoko, Checkers, Minesweeper, Tetris.
			Statistics. Optimal experimental design.
				
7. NP-Completeness

		Def. An NP problem is NP-complete if every problem in NP poly-time reduce to it.
		Proposition. [Cook 1971, Levin 1973] SAT is NP-complete. (every NP problem is a SAT problem in disguise)
		
		Extremely brief proof sketch:
			・Convert non-deterministic TM notation to SAT notation.
			・If you can solve SAT, you can solve any problem in NP.
			
			Corollary. Poly-time algorithm for SAT iff P = NP.
			You NP-complete me
			
		Implications of Cook-Levin theorem: All of above problems (and many, many more) poly-time reduce to SAT.