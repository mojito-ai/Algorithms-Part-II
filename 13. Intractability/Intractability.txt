Introduction:

	1. Questions about computations
	
		Q. What is a general-purpose computer?
		Q. Are there limits on the power of digital computers?
		Q. Are there limits on the power of machines we can build?
		
		David Hilbert, Kurt Gödel, Alan Turing, Alonzo Church, John von Neumann
		
	2. A simple model of computation: DFAs
	
		Tape.
			・Stores input.
			・One arbitrarily long strip, divided into cells.
			・Finite alphabet of symbols.
		
		Tape head.
			・Points to one cell of tape.
			・Reads a symbol from active cell.
			・Moves one cell at a time.
			
		Q. Is there a more powerful model of computation?
		A. Yes.
		
	3. A universal model of computation: Turing machines
	
		Tape.
			・Stores input, output, and intermediate results.
			・One arbitrarily long strip, divided into cells.
			・Finite alphabet of symbols.
			
		Tape head.
			・Points to one cell of tape.
			・Reads a symbol from active cell.
			・Writes a symbol to active cell.
			・Moves one cell at a time.
			
		Q. Is there a more powerful model of computation?
		A. No!
		
	4. Church-Turing thesis (1936)
	
		Turing machines can compute any function that can be computed by a physically harnessable process of the natural world.
		
		Remark. "Thesis" and not a mathematical theorem because it's a statement about the physical world and not subject to proof.
		
		Use simulation to prove models equivalent.
			・Android simulator on iPhone.
			・iPhone simulator on Android.
			
		Implications.
			・No need to seek more powerful machines or languages.
			・Enables rigorous study of computation (in this universe).
			
		Bottom line. Turing machine is a simple and universal model of computation.
		
	5. Church-Turing thesis: evidence
	
		・8 decades without a counterexample.
		・Many, many models of computation that turned out to be equivalent.
		
		model of computation 			description
		enhanced Turing machines 		multiple heads, multiple tapes, 2D tape, nondeterminism
		untyped lambda calculus 		method to define and manipulate functions
		recursive functions 			functions dealing with computation on integers
		unrestricted grammars 			iterative string replacement rules used by linguists
		extended L-systems 				parallel string replacement rules that model plant growth
		programming languages 			Java, C, C++, Perl, Python, PHP, Lisp, PostScript, Excel
		random access machines 			registers plus main memory, e.g., TOY, Pentium
		cellular automata 				cells which change state based on local interactions
		quantum computer 				compute using superposition of quantum states
		DNA computer 					compute using biological operations on DNA
		
	6. A question about algorithms
	
		Q. Which algorithms are useful in practice?
			・Measure running time as a function of input size N.
			・Useful in practice ("efficient") = polynomial time for all inputs.
			
		Ex 1. Sorting N items takes N log N compares using mergesort.
		Ex 2. Finding best TSP tour on N points takes N! steps using brute search.
		
		Theory. Definition is broad and robust.
		Practice. Poly-time algorithms scale to huge problems.