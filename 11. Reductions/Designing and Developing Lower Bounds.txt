Designing Algorithms

		Def. Problem X reduces to problem Y if you can use an algorithm that solves Y to help solve X.
		Design algorithm. Given algorithm for Y, can also solve X.
		
		Ex.
			・3-collinear reduces to sorting. [assignment]
			・Finding the median reduces to sorting.
			・Element distinctness reduces to sorting.
			・CPM reduces to topological sort. [shortest paths lecture]
			・Arbitrage reduces to shortest paths. [shortest paths lecture]
			・Burrows-Wheeler transform reduces to suffix sort. [assignment]
			
		Mentality. Since I know how to solve Y, can I use that algorithm to solve X ?
					programmer’s version: I have code for Y. Can I use it for X?
					
		2. Convex Hull reduces to sorting: 			
		
		Sorting. Given N distinct integers, rearrange them in ascending order.
		Convex hull. Given N points in the plane, identify the extreme points of the convex hull (in counterclockwise order).
		
		Proposition. Convex hull reduces to sorting.
		Pf. Graham scan algorithm (see next slide).
		Cost of convex hull. N log N + N.
		
		
		Graham scan algorithm
		・Choose point p with smallest (or largest) y-coordinate.
		・Sort points by polar angle with p to get simple polygon.
		・Consider points in order, and discard those that would create a clockwise turn. 

		3. Shortest paths on edge-weighted graphs and digraphs
		
		Proposition. Undirected shortest paths (with nonnegative weights) reduces to directed shortest path.
		Pf. Replace each undirected edge by two directed edges.
		Cost of undirected shortest paths. E log V + E.
		
		Caveat. Reduction is invalid for edge-weighted graphs with negative weights (even if no negative cycles).
		Remark. Can still solve shortest-paths problem in undirected graphs (if no negative cycles), but need more sophisticated techniques.
		
		
		4. Linear time reductions involving familiar problems
		
		Sorting - finding the median, SPT scheduling, Element distinctness, Convex hull
		
		Shortest paths in digraph - Arbitrage, 												
									Parallel scheduling (precedence constrained)
									Shortest paths in undirected graphs (no negative weights)
						
								Linear Programming
									
		Maxflow - Bipartite matching 
				  network reliability
				  product distribution
				  
				  
Establishing Lower Bounds

		Goal. Prove that a problem requires a certain number of steps.
		Ex. In decision tree model, any compare-based sorting algorithm requires Ω(N log N) compares in the worst case.
		
		Bad news. Very difficult to establish lower bounds from scratch.
		Good news. Spread Ω(N log N) lower bound to Y by reducing sorting to Y.