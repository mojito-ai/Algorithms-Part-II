1. Introduction

	1. Overview: introduction to advanced topics
	
	a. Main topics. [next 3 lectures]
	-Reduction: design algorithms, establish lower bounds, classify problems.
	-Linear programming: the ultimate practical problem-solving model.
	-Intractability: problems beyond our reach.
	
	Shifting gears.
	-From individual problems to problem-solving models.
	-From linear/quadratic to polynomial/exponential scale.
	-From details of implementation to conceptual framework.
	
	Goals.
	-Place algorithms we've studied in a larger context.
	-Introduce you to important and essential ideas.
	-Inspire you to learn more about algorithms!
	
	2. Bird’s-eye view
	
	-Desiderata: Classify problems according to computational requirements.
	
	-complexity 		order of growth 		examples
	
	linear 				N 					min, max, median,
											Burrows-Wheeler transform, ...
											
	linearithmic 		NlogN 				sorting, convex hull,
											closest pair, farthest pair, ...
											
	quadratic 			N2 					?
		⋮				 ⋮ 					⋮
	exponential 		cN 					?
	
	-Frustrating news. Huge number of problems have defied classification.
	
	-Desiderata. Classify problems according to computational requirements.
	-Desiderata'.
		Suppose we could (could not) solve problem X efficiently.
		What else could (could not) we solve efficiently?
		
		“ Give me a lever long enough and a fulcrum on which to
 		  place it, and I shall move the world. ” — Archimedes
 		  
 	3. Reductions
 	
 	Def. Problem X reduces to problem Y if you can use an algorithm that solves Y to help solve X.
 	
 	instance I -------> 	Algorithm for Y -------->    solution to I 
	(of X)

							Algorithm for X
							
							
	- Cost of solving X = total cost of solving Y + cost of reduction.
													(preprocessing and postprocessing)
													
													
	 Ex1.[finding the median reduces to sorting]
			To find the median of N items:
			・Sort N items.
			・Return item in the middle.
			
			Cost of solving finding the median. N log N + 1 .

	 Ex2.[element distinctness reduces to sorting]
			To solve element distinctness on N items:
			・Sort N items.
			・Check adjacent pairs for equality
			
			Cost of solving element distinctness. N log N + N.
			
	 Ex3.[Mincut reduces to maxflow]
	 		We can use hasAugmentingPath() method to find forward edges(not full) and backward edges(not empty)
	 		-We can use BFS or DFS.
	 		-Cost of solving mincut - V+E
	 		
	 