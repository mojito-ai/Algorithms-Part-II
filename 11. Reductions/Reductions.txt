1. Introduction

	1. Overview: introduction to advanced topics
	
	a. Main topics. [next 3 lectures]
	-Reduction: design algorithms, establish lower bounds, classify problems.
	-Linear programming: the ultimate practical problem-solving model.
	-Intractability: problems beyond our reach.
	
	Shifting gears.
	-From individual problems to problem-solving models.
	-From linear/quadratic to polynomial/exponential scale.
	-From details of implementation to conceptual framework.
	
	Goals.
	-Place algorithms we've studied in a larger context.
	-Introduce you to important and essential ideas.
	-Inspire you to learn more about algorithms!
	
	2. Bird’s-eye view
	
	-Desiderata: Classify problems according to computational requirements.
	
	-complexity 		order of growth 		examples
	
	linear 				N 					min, max, median,
											Burrows-Wheeler transform, ...
											
	linearithmic 		NlogN 				sorting, convex hull,
											closest pair, farthest pair, ...
											
	quadratic 			N2 					?
		⋮				 ⋮ 					⋮
	exponential 		cN 					?
	
	-Frustrating news. Huge number of problems have defied classification.
	
	-Desiderata. Classify problems according to computational requirements.
	-Desiderata'.
		Suppose we could (could not) solve problem X efficiently.
		What else could (could not) we solve efficiently?
		
		“ Give me a lever long enough and a fulcrum on which to
 		  place it, and I shall move the world. ” — Archimedes